from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from db_moves.get_db import check_player_design, check_user_el_in_game, check_user_role
from db_moves.add_db import use_el_in_game
from hendlers.ls.player import player_router, cached_photo_path5, cached_photo_path21
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext 
from db import get_db_connection
from hendlers.ls.player import cached_photo_path17, cached_photo_path22
from aiogram import types 
import os 
from keyboards import attack_buttons_KMN_ls, defense_buttons_KMN_ls, game_ls_back_keyboard, ls_simbols_for_ocko_att, ls_simbols_for_ocko_def
import asyncio
import random
cached_photo_path2 = types.FSInputFile(os.path.join("img", "bj.jpg"))
cached_photo_path3 = types.FSInputFile(os.path.join("img", "bj1.jpg"))
cached_photo_path4 = types.FSInputFile(os.path.join("img", "bj2.jpg"))
cached_photo_path5 = types.FSInputFile(os.path.join("img", "tours2.jpg"))
cached_photo_path6 = types.FSInputFile(os.path.join("img", "kmn_play.jpg"))
cached_photo_path7 = types.FSInputFile(os.path.join("img", "kmn_waiting.jpg"))

remove_big_values = False
remove_small_values = False
help_history = []

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
active_timers = {}
def generate_deck():
    suits = ["‚ô†Ô∏è", "‚ô•Ô∏è", "‚ô¶Ô∏è", "‚ô£Ô∏è"]
    ranks = {
        "6": 6, "7": 7, "8": 8, "9": 9, "10": 10,
        "J": 2, "Q": 3, "K": 4, "A": 11
    }
    return [(f"{suit} {rank}", value) for suit in suits for rank, value in ranks.items()]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
async def reset_timer(player_id):
    if player_id in active_timers:
        active_timers[player_id].cancel()  
        del active_timers[player_id]  



async def start_turn_timer(game, callback_query, player_id, timeout=15):
    print("&%*$(#*$)")
    await reset_timer(player_id)
    async def countdown():
        for remaining in range(timeout, 0, -1):
            print(f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id}: {remaining} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(1)

        # –ù–∞–π—Ç–∏ –∏–≥—Ä—É –ø–æ ID –∏–≥—Ä–æ–∫–∞
        game = next(
            (g for g in ongoing_games.values() if player_id in (g["current_attacker"], g["current_defender"])),
            None
        )
        if game:
            if game["state"] == "waiting_for_attack" and game["current_attacker"] == player_id:
                print(f"–ò–≥—Ä–æ–∫ {player_id} –Ω–µ —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥")
                await callback_query.bot.send_message(
                    chat_id=player_id, text="–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥!"
                )
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥
                await end_round(game, callback_query, player_id)


            elif game["state"] == "waiting_for_defense" and game["current_defender"] == player_id:
                print(f"–ò–≥—Ä–æ–∫ {player_id} –Ω–µ —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥")
                await callback_query.bot.send_message(
                    chat_id=player_id, text="–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥!"
                )
                await end_round(game, callback_query, player_id)

            else:
                await callback_query.bot.send_message(
                    chat_id=player_id, text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
        else:
            await callback_query.bot.send_message(
                chat_id=player_id, text="–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            )

    task = asyncio.create_task(countdown())
    active_timers[player_id] = task


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
async def end_round(game, callback_query, player_id):
    print(game["round"], game['scores'][game["current_attacker"]] != game['scores'][game['current_defender']])
    if game["round"] < 4 :
        if player_id == game["current_attacker"]:
            game.pop("defense_locked", None)
            print('att')
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É

            await callback_query.bot.edit_message_media(
                chat_id=game["current_attacker"],
                message_id=game["messages"][game["current_attacker"]],
                media=types.InputMediaPhoto(
                    media=cached_photo_path4,
                    caption=f"–í—ã —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n\n"
                    f"üéÆ <b>{game['usernames'][game['current_attacker']]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][game['current_attacker']])}\n –û—á–∫–∏: {game['scores'][game['current_attacker']]}.\n"
                    f"üéÆ <b>{game['usernames'][game['current_defender']]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][game['current_defender']])}\n –û—á–∫–∏: {game['scores'][game['current_defender']]}.\n\n",
                    parse_mode="HTML"
                ),
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∞
            await callback_query.bot.edit_message_media(
                chat_id=game["current_defender"],
                message_id=game["messages"][game["current_defender"]],
                media=types.InputMediaPhoto(
                    media=cached_photo_path3,
                    caption=f"üéÆ <b>{game['usernames'][game['current_attacker']]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][game['current_attacker']])}\n –û—á–∫–∏: {game['scores'][game['current_attacker']]}.\n"
                    f"üéÆ <b>{game['usernames'][game['current_defender']]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][game['current_defender']])}\n –û—á–∫–∏: {game['scores'][game['current_defender']]}.\n\n"
                    f"üéØ –•–æ–¥–∏—Ç <b>{game['usernames'][game['defender']]}</b>. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
                    parse_mode='HTML',
                ),
                reply_markup=ls_simbols_for_ocko_def,
            )
            game["round"] += 1
            # game["current_attacker"], game["current_defender"] = game["current_defender"], game["current_attacker"]
            game["state"] = "waiting_for_defense"
            game["attack_locked"] = True
            await start_turn_timer(game, callback_query, game["current_defender"])

        elif player_id == game["current_defender"]:
            game.pop("attack_locked", None)
            print('def')
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞—É–Ω–¥—É

            await callback_query.bot.edit_message_media(
                chat_id=game["current_defender"],
                message_id=game["messages"][game["current_defender"]],
                media=types.InputMediaPhoto(
                    media=cached_photo_path4,
                    caption=f"–í—ã —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n\n"
                    f"üéÆ <b>{game['usernames'][game['current_attacker']]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][game['current_attacker']])}\n –û—á–∫–∏: {game['scores'][game['current_attacker']]}.\n"
                    f"üéÆ <b>{game['usernames'][game['current_defender']]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][game['current_defender']])}\n –û—á–∫–∏: {game['scores'][game['current_defender']]}.\n\n",
                    parse_mode="HTML"
                ),
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∞
            await callback_query.bot.edit_message_media(
                chat_id=game["current_attacker"],
                message_id=game["messages"][game["current_attacker"]],
                media=types.InputMediaPhoto(
                    media=cached_photo_path3,
                    caption=f"üéÆ <b>{game['usernames'][game['current_attacker']]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][game['current_attacker']])}\n –û—á–∫–∏: {game['scores'][game['current_attacker']]}.\n"
                    f"üéÆ <b>{game['usernames'][game['current_defender']]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][game['current_defender']])}\n –û—á–∫–∏: {game['scores'][game['current_defender']]}.\n\n"
                    f"üéØ –•–æ–¥–∏—Ç <b>{game['usernames'][game['attacker']]}</b>. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
                    parse_mode='HTML',
                ),
                reply_markup=ls_simbols_for_ocko_att,
            )
            game["round"] += 1
            # game["current_attacker"], game["current_defender"] = game["current_defender"], game["current_attacker"]
            game["state"] = "waiting_for_attack"
            game["defense_locked"] = True
            await start_turn_timer(game, callback_query, game["current_attacker"])

        #     # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞—Ç–∞–∫—É—é—â–µ–≥–æ
        # await start_turn_timer(game, callback_query, next_attacker_id)
    elif game["round"] == 4 and game['scores'][game['current_attacker']] != game['scores'][game['current_defender']]:
        print("01111111111111111111111111111111111111111111111111111111111111111111111")
        attacker_id = game["current_attacker"]
        defender_id = game["current_defender"]
        winner_id = attacker_id if game['scores'][attacker_id] > game['scores'][defender_id] else defender_id
        winner_username = game['usernames'][winner_id]

        new_text = (
            f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
            f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n"
        )

        final_message = (
        f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{winner_username}</b>\n\n"
        f"{new_text}"
        )

        await callback_query.bot.edit_message_media(
            chat_id=attacker_id,
            message_id=game["messages"][attacker_id],
            media=types.InputMediaPhoto(
                media=cached_photo_path5,
                caption=final_message,
                parse_mode='HTML'
            ),
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∞
        await callback_query.bot.edit_message_media(
            chat_id=defender_id,
            message_id=game["messages"][game["current_defender"]],
            media=types.InputMediaPhoto(
                media=cached_photo_path5,
                caption=final_message,
                parse_mode='HTML',
            ),
        )

    elif game["round"] == 4 and game['scores'][game["current_attacker"]] == game['scores'][game["current_defender"]]:
        attacker_id = game["current_attacker"]
        defender_id = game["current_defender"]

        new_text = (
            f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
            f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n"
        )

        final_message = (
        f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–ù–∏—á—å—è\n\n"
        f"{new_text}"
        )

        await callback_query.bot.edit_message_media(
            chat_id=attacker_id,
            message_id=game["messages"][attacker_id],
            media=types.InputMediaPhoto(
                media=cached_photo_path5,
                caption=final_message,
                parse_mode='HTML'
            ),
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∞
        await callback_query.bot.edit_message_media(
            chat_id=defender_id,
            message_id=game["messages"][game["current_defender"]],
            media=types.InputMediaPhoto(
                media=cached_photo_path5,
                caption=final_message,
                parse_mode='HTML',
            ),
        )

        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
        ongoing_games.pop(game["attacker"], None)

        
# –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Ochko(StatesGroup):
    waiting_for_message = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "profile_penality"
@player_router.callback_query(lambda c: c.data == "profile_21")
async def ls_ochko(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    player_role = await check_player_design(user_id=user_id)
    print('fffff')
    # –ö–æ–≥–¥–∞ –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É –≤—Ö–æ–¥–∏–º –≤ —Å–æ—Å–æ—Ç–æ—è–Ω–∏–µ
    await state.set_state(Ochko.waiting_for_message)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –±–æ–µ—Ü –≤ –∏–≥—Ä–µ —Ç–æ –Ω–µ –¥–∞–µ–º –µ–º—É –≤—ã–∑–æ–≤–∞–º–∏ –∫–∏–¥–∞—Ç—å—Å—è
    # –í–û–¢ –≠–¢–û –ö–û–ú–ï–ù–¢–ò–¢–¨ –ò –°–ú–û–ñ–ï–®–¨ –ò–ì–†–ê–¢–¨
    # if any(user_id in (game["attacker"], game["defender"]) for game in ongoing_games.values()):
    #     await callback_query.message.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.")
    #     return

    await callback_query.message.answer(
        text = "–ù–∞–ø–∏—à–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:",
        reply_markup=game_ls_back_keyboard
        )

    @player_router.message(Ochko.waiting_for_message)
    async def check_username_ochko(message: Message):
        opponent_username = message.text.strip("@")
        conn = await get_db_connection()
        try:
            # –ò—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É username
            query = "SELECT user_id FROM users WHERE username = $1"
            opponent_id = await conn.fetchval(query, opponent_username)
            player_design = await check_player_design(opponent_id)
            if opponent_id:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É–∂–µ –≤ –∏–≥—Ä–µ, –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞—á–∞—Ç—å —Å –Ω–∏–º –∏–≥—Ä—É
                # –¢–û–ñ–ï –ù–ê –ö–û–ú–ï–ù–¢ 
                # if any(opponent_id in (game["attacker"], game["defender"]) for game in ongoing_games.values()):
                #     await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{opponent_username} —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                #     return

                # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤"
                ochko_accept_keyboard_ls = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤",
                            callback_data=f"accept_ochko_ls:{user_id}"
                        )
                    ]
                ])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 
                await message.bot.send_photo(
                    chat_id=opponent_id,
                    photo=cached_photo_path22 if not player_design else cached_photo_path17,
                    caption=f"<b>–ò–≥—Ä–æ–∫ @{callback_query.from_user.username}</b> –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å –≤ <i>21 ‚ô†Ô∏è‚ô•Ô∏è</i>\n\n"
                            "–ù–∞–∂–º–∏—Ç–µ <b>–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤</b>, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!",
                    parse_mode="HTML",
                    reply_markup=ochko_accept_keyboard_ls,
                )
                await message.answer(f"–í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{opponent_username}!")
            else:
                await message.answer("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
        finally:
            await conn.close()

        # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()
        print('–≤—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è(–¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ)')

ongoing_games = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤"
@player_router.callback_query(lambda c: c.data.startswith("accept_ochko_ls"))
async def accept_ochko_ls(callback_query: CallbackQuery):
    initiator_id = int(callback_query.data.split(":")[1])
    defender_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ª—é–±–æ–π –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ —É–∂–µ –≤ –∏–≥—Ä–µ, –æ—Ç–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    # B –≠–¢–û –¢–û–ñ–ï –ö–û–ú–ï–ù–¢
    # if any(initiator_id in (game["attacker"], game["defender"]) or defender_id in (game["attacker"], game["defender"]) for game in ongoing_games.values()):
    #     await callback_query.answer("–û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.")
    #     return

    

    deck = generate_deck()
    random.shuffle(deck)

    # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º—ã
    initiator_chat = await callback_query.bot.get_chat(initiator_id)
    initiator_username = initiator_chat.username or f"–ò–≥—Ä–æ–∫ {initiator_id}"

    defender_chat = callback_query.from_user
    defender_username = defender_chat.username or f"–ò–≥—Ä–æ–∫ {defender_id}"

    player1_cards = [deck.pop() for _ in range(2)]
    player2_cards = [deck.pop() for _ in range(2)]

    def calculate_score(cards):
        score = sum(card[1] for card in cards)
        if len(cards) == 2 and cards[0][1] == 11 and cards[1][1] == 11:  # –î–≤–∞ —Ç—É–∑–∞
            return 21
        return score

    player1_score = calculate_score(player1_cards)
    player2_score = calculate_score(player2_cards)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    ongoing_games[initiator_id] = {
        "attacker": initiator_id,
        "defender": defender_id,
        "deck": deck,
        "round": 1,
        "scores": {initiator_id: player1_score, defender_id: player2_score},
        "state": "waiting_for_attack",
        "current_attacker": initiator_id,
        "current_defender": defender_id,
        "history": {initiator_id: player1_cards, defender_id: player2_cards},
        "messages": {},  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π
        "usernames": {initiator_id: initiator_username, defender_id: defender_username},  # –Æ–∑–µ—Ä–Ω–µ–π–º—ã –∏–≥—Ä–æ–∫–æ–≤
    }

    game = ongoing_games[initiator_id]
    print(game)


    # game["history"][initiator_id].append(player1_cards)


    # –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
    attack_message = await callback_query.bot.send_photo(
        chat_id=initiator_id,
        photo=cached_photo_path3,
        caption=f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
        f"üéÆ <b>{initiator_username}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][initiator_id])}\n –û—á–∫–∏: {player1_score}.\n"
        f"üéÆ <b>{defender_username}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {player2_score}.\n\n"
        f"üéØ –•–æ–¥–∏—Ç <b>{initiator_username}</b>. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
        parse_mode="HTML",
        reply_markup=ls_simbols_for_ocko_att,
    )
    wait_message = await callback_query.bot.send_photo(
        chat_id=defender_id,
        photo=cached_photo_path4,
        caption=f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
        f"üéÆ <b>{initiator_username}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in player1_cards)}\n –û—á–∫–∏: {player1_score}.\n"
        f"üéÆ <b>{defender_username}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in player2_cards)}\n –û—á–∫–∏: {player2_score}.\n\n"
        f"üéØ –•–æ–¥–∏—Ç <b>{initiator_username}</b>",
        parse_mode="HTML",
    )
    


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
    game["messages"][initiator_id] = attack_message.message_id
    game["messages"][defender_id] = wait_message.message_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞—Ç–∞–∫—É—é—â–µ–≥–æ
    await start_turn_timer(game, callback_query, initiator_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Ç–∞–∫–∏
@player_router.callback_query(lambda c: c.data in ["ochko_go_ferst_ls", "ochko_stop_ferst_ls"])
async def handle_attack_ochko_ls(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    game = next((g for g in ongoing_games.values() if g.get("current_attacker") == user_id), None)
    attacker_id = game["current_attacker"]
    defender_id = game["current_defender"]
    global remove_big_values
    global remove_small_values
    if not game or game["state"] != "waiting_for_attack":
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à —Ö–æ–¥!")
        return

    # –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∞—Ç–∞–∫–æ–π
    await reset_timer(user_id)

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ï–ª–∏—Å–µ–µ–≤
    if "attack_locked" in game and game["attack_locked"]:
        await callback_query.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥!")
        return


    
    game.pop("defense_locked", None)

    if callback_query.data == "ochko_stop_ferst_ls":
        game["state"] = "waiting_for_defense"
        game["attack_locked"] = True
        if game["scores"][attacker_id] == 21:

            new_text = (
                    f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
                    f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n"
                )

            final_message = (
            f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! 21! \n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{game['usernames'][attacker_id]}</b>\n\n"
            f"{new_text}"
            )

            await callback_query.bot.edit_message_media(
                chat_id=attacker_id,
                message_id=game["messages"][attacker_id],
                media = types.InputMediaPhoto(
                    media=cached_photo_path5,
                    caption=final_message,
                    parse_mode="HTML"
                
                ),
            )
            await callback_query.bot.edit_message_media(
                chat_id=defender_id,
                message_id=game["messages"][defender_id],
                media = types.InputMediaPhoto(
                    media=cached_photo_path5,
                    caption=final_message,
                    parse_mode="HTML"
                
                ),
            )
            ongoing_games.pop(game["attacker"], None)
            return

        await callback_query.bot.edit_message_media(
            chat_id=attacker_id,
            message_id=game["messages"][attacker_id],
            media=types.InputMediaPhoto(
                media=cached_photo_path4,
                caption=f"–í—ã —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n\n"
                f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
                f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n",
                parse_mode='HTML'
            ),
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∞
        await callback_query.bot.edit_message_media(
            chat_id=defender_id,
            message_id=game["messages"][defender_id],
            media=types.InputMediaPhoto(
                media=cached_photo_path3,
                caption=f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
                f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n"
                f"üéØ –•–æ–¥–∏—Ç <b>{game['usernames'][game['defender']]}</b>. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
                parse_mode='HTML',
            ),
            reply_markup=ls_simbols_for_ocko_def,
        )
        game['round']+=1
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞—â–∏—Ç–Ω–∏–∫–∞
        await start_turn_timer(game, callback_query, defender_id)
        return
    
    if remove_big_values:
        deck_cur = game["deck"]
        deck_2 = sorted(deck_cur, key=lambda x:x[1])
        deck_small = deck_2[:len(deck_2)//2]
        random.shuffle(deck_small)
        print(deck_small)
        card = deck_small.pop()
        print(card)
    elif remove_small_values:
        deck_cur = game["deck"]
        deck_2 = sorted(deck_cur, key=lambda x:x[1])
        print(deck_2)
        deck_small = deck_2[len(deck_2)//2:]
        random.shuffle(deck_small)
        print(deck_small)
        card = deck_small.pop()
        print(card)
    else:
        print(game["deck"])
        card = game["deck"].pop()
        print(card)

    # card = game["deck"].pop()
    game["history"][attacker_id].append(card)
    game["scores"][attacker_id] += card[1]

    
    if game["scores"][attacker_id] >21:
        print('–ø–µ—Ä–µ–±–æ—Ä')

        new_text = (
                f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
                f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n"
            )

        final_message = (
        f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ–±–æ—Ä \n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{game['usernames'][defender_id]}</b>\n\n"
        f"{new_text}"
        )

        await callback_query.bot.edit_message_media(
            chat_id=attacker_id,
            message_id=game["messages"][attacker_id],
            media = types.InputMediaPhoto(
                media=cached_photo_path5,
                caption=final_message,
                parse_mode="HTML"
            
            ),
        )
        await callback_query.bot.edit_message_media(
            chat_id=defender_id,
            message_id=game["messages"][defender_id],
            media = types.InputMediaPhoto(
                media=cached_photo_path5,
                caption=final_message,
                parse_mode="HTML"
            
            ),
        )
        ongoing_games.pop(game["attacker"], None)
        return



    new_text = (
        f"üéÆ –ò–≥—Ä–æ–∫ <b>{game['usernames'][game['attacker']]}</b> –≤–∑—è–ª –∫–∞—Ä—Ç—É: {card[0]}\n\n"
        f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
        f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n"
        f"üéØ –•–æ–¥–∏—Ç <b>{game['usernames'][game['attacker']]}</b>. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?"
    )
    # current_markup = group_simbols_for_ocko_att if game["turn"] == 1 else group_simbols_for_ocko_def
    await callback_query.bot.edit_message_media(
        chat_id=attacker_id,
        message_id=game["messages"][attacker_id],
        media = types.InputMediaPhoto(
            media=cached_photo_path3,
            caption=new_text,
            parse_mode="HTML"
         
        ),
        reply_markup=ls_simbols_for_ocko_att)
    await start_turn_timer(game, callback_query, attacker_id)
    await callback_query.answer("–í—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—É. –í–∞—à —Ö–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")
    return



@player_router.callback_query(lambda c: c.data in ["ochko_go_second_ls", "ochko_stop_second_ls"])
async def handle_defense_ochko(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    global remove_small_values
    global remove_big_values
    game = next((g for g in ongoing_games.values() if g.get("current_defender") == user_id), None)

    if not game or game["state"] != "waiting_for_defense":
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à —Ö–æ–¥!")
        return

    # –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞—â–∏—Ç–æ–π
    await reset_timer(user_id)

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    if "defense_locked" in game and game["defense_locked"]:
        await callback_query.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ44444 –∑–∞—â–∏—Ç—ã!")
        return

    
    
    game.pop("attack_locked", None)
    attacker_id = game["current_attacker"]
    defender_id = game["current_defender"]
    print(game)
    
    if callback_query.data == "ochko_stop_second_ls":
        game["state"] = "waiting_for_attack"
        game["defense_locked"] = True

        if game["scores"][defender_id] == 21:

            new_text = (
                    f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
                    f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n"
                )

            final_message = (
            f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! 21! \n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{game['usernames'][defender_id]}</b>\n\n"
            f"{new_text}"
            )

            await callback_query.bot.edit_message_media(
                chat_id=attacker_id,
                message_id=game["messages"][attacker_id],
                media = types.InputMediaPhoto(
                    media=cached_photo_path5,
                    caption=final_message,
                    parse_mode="HTML"
                
                ),
            )
            await callback_query.bot.edit_message_media(
                chat_id=defender_id,
                message_id=game["messages"][defender_id],
                media = types.InputMediaPhoto(
                    media=cached_photo_path5,
                    caption=final_message,
                    parse_mode="HTML"
                
                ),
            )
            ongoing_games.pop(game["attacker"], None)
            return


        if game["round"] == 4:
            if game['scores'][attacker_id] != game['scores'][defender_id]:
                winner_id = attacker_id if game['scores'][attacker_id] > game['scores'][defender_id] else defender_id
                winner_username = game['usernames'][winner_id]
                

                new_text = (
                    f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
                    f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n"
                )

                final_message = (
                f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{winner_username}</b>\n\n"
                f"{new_text}"
                )

                await callback_query.bot.edit_message_media(
                    chat_id=attacker_id,
                    message_id=game["messages"][attacker_id],
                    media=types.InputMediaPhoto(
                        media=cached_photo_path5,
                        caption=final_message,
                        parse_mode='HTML'
                    ),
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∞
                await callback_query.bot.edit_message_media(
                    chat_id=defender_id,
                    message_id=game["messages"][game["current_defender"]],
                    media=types.InputMediaPhoto(
                        media=cached_photo_path5,
                        caption=final_message,
                        parse_mode='HTML',
                    ),
                )

                ongoing_games.pop(game["attacker"], None)
                return
            
            else:
                

                new_text = (
                    f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
                    f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n"
                )

                final_message = (
                f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–ù–∏—á—å—è\n\n"
                f"{new_text}"
                )

                await callback_query.bot.edit_message_media(
                    chat_id=attacker_id,
                    message_id=game["messages"][attacker_id],
                    media=types.InputMediaPhoto(
                        media=cached_photo_path5,
                        caption=final_message,
                        parse_mode='HTML'
                    ),
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∞
                await callback_query.bot.edit_message_media(
                    chat_id=defender_id,
                    message_id=game["messages"][game["current_defender"]],
                    media=types.InputMediaPhoto(
                        media=cached_photo_path5,
                        caption=final_message,
                        parse_mode='HTML',
                    ),
                )

                ongoing_games.pop(game["attacker"], None)
                return


        await callback_query.bot.edit_message_media(
            chat_id=attacker_id,
            message_id=game["messages"][attacker_id],
            media=types.InputMediaPhoto(
                media=cached_photo_path3,
                caption=f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
                f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n"
                f"üéØ –•–æ–¥–∏—Ç <b>{game['usernames'][game['attacker']]}</b>. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?",
                parse_mode="HTML"
                ),            
            reply_markup=ls_simbols_for_ocko_att,
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∞
        await callback_query.bot.edit_message_media(
            chat_id=defender_id,
            message_id=game["messages"][game["current_defender"]],
            media=types.InputMediaPhoto(
                media=cached_photo_path4,
                caption=f"–í—ã —Å–¥–µ–ª–∞–ª–∏ —Ö–æ–¥. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n\n"
                f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
                f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n",
                parse_mode='HTML',
            ),
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∞
        game['round']+=1
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞—â–∏—Ç–Ω–∏–∫–∞
        await start_turn_timer(game, callback_query, attacker_id)
        return

    if remove_big_values:
        deck_cur = game["deck"]
        deck_2 = sorted(deck_cur, key=lambda x:x[1])
        deck_small = deck_2[:len(deck_2)//2]
        random.shuffle(deck_small)
        print(deck_small)
        card = deck_small.pop()
        print(card)
    elif remove_small_values:
        deck_cur = game["deck"]
        deck_2 = sorted(deck_cur, key=lambda x:x[1])
        print(deck_2)
        deck_small = deck_2[len(deck_2)//2:]
        random.shuffle(deck_small)
        print(deck_small)
        card = deck_small.pop()
        print(card)
    else:
        print(game["deck"])
        card = game["deck"].pop()
        print(card)

    # card = game["deck"].pop()
    game["history"][defender_id].append(card)
    game["scores"][defender_id] += card[1]

    if game["scores"][defender_id] >21:
        print('–ø–µ—Ä–µ–±–æ—Ä2')

        new_text = (
                f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
                f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n"
            )

        final_message = (
        f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ–±–æ—Ä \n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{game['usernames'][attacker_id]}</b>\n\n"
        f"{new_text}"
        )

        await callback_query.bot.edit_message_media(
            chat_id=attacker_id,
            message_id=game["messages"][attacker_id],
            media = types.InputMediaPhoto(
                media=cached_photo_path5,
                caption=final_message,
                parse_mode="HTML"
            
            ),
        )
        await callback_query.bot.edit_message_media(
            chat_id=defender_id,
            message_id=game["messages"][defender_id],
            media = types.InputMediaPhoto(
                media=cached_photo_path5,
                caption=final_message,
                parse_mode="HTML"
            
            ),
        )
        ongoing_games.pop(game["attacker"], None)
        return

    new_text = (
        f"üéÆ –ò–≥—Ä–æ–∫ <b>{game['usernames'][game['attacker']]}</b> –≤–∑—è–ª –∫–∞—Ä—Ç—É: {card[0]}\n\n"
        f"üéÆ <b>{game['usernames'][attacker_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][attacker_id])}\n –û—á–∫–∏: {game['scores'][attacker_id]}.\n"
        f"üéÆ <b>{game['usernames'][defender_id]}</b>\n –ö–∞—Ä—Ç—ã: {', '.join(c[0] for c in game['history'][defender_id])}\n –û—á–∫–∏: {game['scores'][defender_id]}.\n\n"
        f"üéØ –•–æ–¥–∏—Ç <b>{game['usernames'][game['defender']]}</b>. –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?"
    )
    # current_markup = group_simbols_for_ocko_att if game["turn"] == 1 else group_simbols_for_ocko_def
    await callback_query.bot.edit_message_media(
        chat_id=defender_id,
        message_id=game["messages"][defender_id],
        media = types.InputMediaPhoto(
            media=cached_photo_path3,
            caption=new_text,
            parse_mode="HTML"
         
        ),
        reply_markup=ls_simbols_for_ocko_def)
    await start_turn_timer(game, callback_query, defender_id)
    await callback_query.answer("–í—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—É. –í–∞—à —Ö–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.")
    return

@player_router.callback_query(lambda c: c.data in ["ochko_remove_big_values_ls", "ochko_remove_small_values_ls"])
async def handle_defense_bonus(callback_query: types.CallbackQuery):
    global help_history
    global remove_big_values
    global remove_small_values
    user_id = callback_query.from_user.id
    user_el = await check_user_el_in_game(user_id=user_id)
    choice = callback_query.data
    if user_id not in help_history:
        if choice =="ochko_remove_big_values_ls":
            if '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞' in user_el:
                print('1=!!!+!+!')
                remove_big_values = True
                await callback_query.answer(
                            text=f"–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, —Ö–æ–¥–∏—Ç–µ!",
                            show_alert=True
                        )
                await use_el_in_game(user_id = user_id, sale_name='–°—Ç—Ä–∞—Ö–æ–≤–∫–∞')
                help_history.append(user_id)
            elif '–°—Ç—Ä–∞—Ö–æ–≤–∫–∞' not in user_el:
                await callback_query.answer(
                        text=f"–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–æ–Ω—É—Å–∞",
                        show_alert=True
                    )
        elif choice =="ochko_remove_small_values_ls":
            if '–ê–∑–∞—Ä—Ç' in user_el:
                print('1=!!!+!+!')
                remove_small_values = True
                await callback_query.answer(
                            text=f"–ê–∑–∞—Ä—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –±–µ–π—Ç–µ!",
                            show_alert=True
                        )
                await use_el_in_game(user_id = user_id, sale_name='–ê–∑–∞—Ä—Ç')
                help_history.append(user_id)
            elif '–ê–∑–∞—Ä—Ç' not in user_el:
                await callback_query.answer(
                        text=f"–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–æ–Ω—É—Å–∞",
                        show_alert=True
                    )
    else:
        await callback_query.answer(
                        text=f"–£—Å–∏–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –∏–≥—Ä—É",
                        show_alert=True
                    )