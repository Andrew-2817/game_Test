from hendlers.ls.player import player_router, cached_photo_path5, cached_photo_path9, bot
from aiogram.types import CallbackQuery, InputMediaPhoto
from db import get_db_connection
from aiogram import types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
from hendlers.ls.penalty_ls import ongoing_games, cached_photo_path3, cached_photo_path7, start_turn_timer, reset_timer, cached_photo_path6
import pytz
from datetime import datetime, timedelta
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext 
from aiogram.exceptions import TelegramBadRequest
import os 
import time 
from keyboards import tournament_attack_buttons, tournament_defense_buttons
import asyncio
from asyncio import Lock


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (user_id: username)
registered_users = {}
# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
edit_lock = Lock()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def get_tour_keyboard():
    count = len(registered_users)
    tour_reg = InlineKeyboardButton(text=f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üî• ({count})", callback_data="tour_reg")
    tour_back = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="profile_back")
    return InlineKeyboardMarkup(inline_keyboard=[[tour_reg], [tour_back]])


confirm_button = InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ ‚úÖ", callback_data="confirm_participation")
keyboard = InlineKeyboardMarkup(inline_keyboard=[[confirm_button]])

async def create_and_send_participants_list():
    if not registered_users:
        message_text = "–¢—É—Ä–Ω–∏—Ä–∞ –Ω–µ –±—É–¥–µ—Ç"
    else:
        participants = "\n".join([f"@{username}" for username in registered_users.values()])
        message_text = f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n\n{participants}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ."
    # —Ä–∞—Å–∫–∏–¥—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è 
    for user_id in registered_users.keys():
        try:
            await bot.send_message(user_id, message_text, reply_markup=keyboard)
        except TelegramBadRequest as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    print("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–Ω–æ–ø–∫–æ–π '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ'.")


# –∑–∞–¥–∞–µ–º –≤—Ä–µ–º—è —Ç—É—Ä–∏–∫–∞ 
async def schedule_tournament_start():
    moscow_tz = pytz.timezone('Europe/Moscow')
    
    while True:
        now = datetime.now(moscow_tz)
        print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ: {now}", flush=True)
        target_time = now.replace(hour=10, minute=12, second=0, microsecond=0)

        if now > target_time:
            target_time += timedelta(days=1)

        wait_time = (target_time - now).total_seconds()
        print(f"–û–∂–∏–¥–∞–Ω–∏–µ : {wait_time} —Å–µ–∫—É–Ω–¥", flush=True)

        await asyncio.sleep(wait_time)

        await create_and_send_participants_list()

# –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
async def start_tournament_timer():
    await schedule_tournament_start()


confirmed_users = {}
sent_users = set()
sent_matches = set()
tournament_matches = []  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç—á–µ–π
admin_start_messages = {}# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç—á–µ–π
matches_sent = False  # –§–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Ç—á–µ–π
admin_id = 7459734786  # ID –∞–¥–º–∏–Ω–∞

@player_router.callback_query(lambda c: c.data == "confirm_participation")
async def confirm_participation(callback_query: CallbackQuery):
    global matches_sent
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username

    if user_id in confirmed_users:
        await callback_query.answer("–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ!", show_alert=True)
        return  

    confirmed_users[user_id] = username
    await callback_query.answer("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ!")
    print(f"–ò–≥—Ä–æ–∫ @{username} ({user_id}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ, –≤—Å–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {len(confirmed_users)}")

    try:
        await callback_query.message.edit_text(
            text="‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ!", reply_markup=None
        )
    except TelegramBadRequest:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")

    await asyncio.sleep(15)
    try:
        await callback_query.message.delete()
    except TelegramBadRequest:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ª–∏ –º–∞—Ç—á–∏
    if len(confirmed_users) >= 2 and not matches_sent:
        print("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç—á–∏")
        async with edit_lock:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–æ–∫
            if not matches_sent:  # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                await send_matchups(callback_query.bot)


def generate_fixed_bracket(players):
    total = 2 ** ((len(players) - 1).bit_length())  # –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∫ —Å—Ç–µ–ø–µ–Ω–∏ 2
    players = players + ['bot'] * (total - len(players))  # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞ –±–æ—Ç–∞–º–∏
    print(f"generate_fixed_bracket: –ò–≥—Ä–æ–∫–∏: {players}, –≤—Å–µ–≥–æ: {total}")

    matches = []
    match_index = 1

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    for i in range(0, len(players), 2):
        player1 = players[i]
        player2 = players[i + 1]
        matches.append((player1, player2, match_index))
        match_index += 1

    print(f"generate_fixed_bracket: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –º–∞—Ç—á–∏: {matches}")
    return matches

async def send_matchups(bot: Bot):
    global tournament_matches, sent_matches, matches_sent, sent_users, admin_start_messages

    if matches_sent:
        print("send_matchups: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞")
        return  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É

    user_ids = list(confirmed_users.keys())
    print(f"send_matchups: –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤: {user_ids}")
    matchups = generate_fixed_bracket(user_ids)
    tournament_matches = matchups
    sent_matches.clear()
    admin_start_messages.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ (–æ–¥–Ω–æ –Ω–∞ –≤—Å–µ—Ö)
    if not sent_users:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
        tournament_start_message = "üéâ –¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è! –û–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–∏ –º–∞—Ç—á–∏."
        for player_id in confirmed_users.keys():
            try:
                await bot.send_message(player_id, tournament_start_message)
                sent_users.add(player_id)
                print(f"send_matchups: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–≥—Ä–æ–∫—É {player_id}")
            except TelegramBadRequest as e:
                print(f"send_matchups: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player_id}: {e}")
    else:
        print("send_matchups: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç—á–µ–π
    for match in matchups:
        try:
            player1, player2, match_idx = match
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤
            if not isinstance(player1, (int, str)) or not isinstance(player2, (int, str)):
                print(f"send_matchups: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Ç—á {match_idx}: {match}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            if (player1, player2) in sent_matches or (player2, player1) in sent_matches:
                print(f"send_matchups: –ú–∞—Ç—á {match_idx} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            sent_matches.add((player1, player2))

            if player2 == "bot":
                try:
                    await bot.send_message(player1, "üéâ –í–∞–º –Ω–µ –Ω–∞—à–ª–æ—Å—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥!")
                    await advance_winner_in_bracket(bot, player1)
                    print(f"send_matchups: –ò–≥—Ä–æ–∫ {player1} –ø—Ä–æ—à—ë–ª –¥–∞–ª—å—à–µ –∏–∑-–∑–∞ –±–æ—Ç–∞ –≤ –º–∞—Ç—á–µ {match_idx}")
                except TelegramBadRequest as e:
                    print(f"send_matchups: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player1}: {e}")
                continue

            username1 = confirmed_users.get(player1, f"–ò–≥—Ä–æ–∫ {player1}")
            username2 = confirmed_users.get(player2, f"–ò–≥—Ä–æ–∫ {player2}")

            message_text = f"–ú–∞—Ç—á {match_idx}: @{username1} vs @{username2}\n–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞!"

            try:
                await bot.send_message(player1, message_text)
                await bot.send_message(player2, message_text)
                print(f"send_matchups: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ {match_idx}: @{username1} vs @{username2}")
            except TelegramBadRequest as e:
                print(f"send_matchups: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ {match_idx}: {e}")

            match_text = f"–ú–∞—Ç—á {match_idx}: @{username1} vs @{username2}"
            await send_admin_start_button(bot, admin_id, match_idx, match_text)

        except ValueError as e:
            print(f"send_matchups: –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –º–∞—Ç—á–∞ {match}: {e}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue

    matches_sent = True
    print(f"send_matchups: –í—Å–µ –º–∞—Ç—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, tournament_matches: {tournament_matches}")



async def send_admin_start_button(bot: Bot, admin_id: int, match_idx: int, match_text: str):
    if match_idx in admin_start_messages:
        return  

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Ç—á", callback_data=f"start_tournament_game_{match_idx}")]
    ])
    message = await bot.send_message(chat_id=admin_id, text=f"{match_text} \n–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Ç—á {match_idx}", reply_markup=keyboard)
    admin_start_messages[match_idx] = message.message_id

    print(f"–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –º–∞—Ç—á–∞ {match_idx}, admin_start_messages: {admin_start_messages}")  


async def check_and_start_next_round(bot: Bot):
    global confirmed_users, tournament_matches, sent_matches, matches_sent, admin_start_messages

    remaining_players = list(confirmed_users.keys())
    print(f"check_and_start_next_round: –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤: {remaining_players}")

    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ ‚Äî –æ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
    if len(remaining_players) == 1:
        winner_id = remaining_players[0]
        winner_username = confirmed_users[winner_id]
        tournament_message = f"üéâ –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω!\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner_username}\n\n–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
        
        for player_id in confirmed_users.keys():
            try:
                await bot.send_message(player_id, tournament_message)
                print(f"check_and_start_next_round: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ –∏–≥—Ä–æ–∫—É {player_id}")
            except TelegramBadRequest as e:
                print(f"check_and_start_next_round: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player_id}: {e}")
        try:
            await bot.send_message(7459734786, tournament_message)
            print("check_and_start_next_round: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ –∞–¥–º–∏–Ω—É")
        except TelegramBadRequest as e:
            print(f"check_and_start_next_round: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        confirmed_users.clear()
        sent_users.clear()
        sent_matches.clear()
        tournament_matches.clear()
        admin_start_messages.clear()
        matches_sent = False
        print("check_and_start_next_round: –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")
        return

    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    if len(remaining_players) > 1:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥", callback_data="start_next_round")]
        ])
        try:
            await bot.send_message(
                7459734786,
                f"üõ† –í—Å–µ –º–∞—Ç—á–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤: {len(remaining_players)}. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥.",
                reply_markup=keyboard
            )
            print("check_and_start_next_round: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞")
        except TelegramBadRequest as e:
            print(f"check_and_start_next_round: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")


async def advance_winner_in_bracket(bot: Bot, winner_id: int):
    """–ü—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥"""
    global confirmed_users

    if winner_id not in confirmed_users:
        print(f"advance_winner_in_bracket: –û—à–∏–±–∫–∞: –ü–æ–±–µ–¥–∏—Ç–µ–ª—å {winner_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ confirmed_users")
        return

    print(f"advance_winner_in_bracket: –ò–≥—Ä–æ–∫ {winner_id} (@{confirmed_users[winner_id]}) –ø—Ä–æ–¥–≤–∏–Ω—É—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏
    if len(confirmed_users) <= 1:
        winner_username = confirmed_users[winner_id]
        try:
            await bot.send_message(winner_id, f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Ç—É—Ä–Ω–∏—Ä–∞!")
            await bot.send_message(7459734786, f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner_username}")
            print(f"advance_winner_in_bracket: –û–±—ä—è–≤–ª–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å @{winner_username}")
        except TelegramBadRequest as e:
            print(f"advance_winner_in_bracket: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–µ: {e}")
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        confirmed_users.clear()
        sent_users.clear()
        sent_matches.clear()
        tournament_matches.clear()
        admin_start_messages.clear()
        matches_sent = False
        print("advance_winner_in_bracket: –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à—ë–Ω, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")
        return


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞
def generate_start_game_button(match_idx: int):
    return InlineKeyboardButton(
        text=f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Ç—á {match_idx}",
        callback_data=f"start_tournament_game_{match_idx}"
    )

@player_router.callback_query(lambda c: c.data.startswith("start_tournament_game_"))
async def start_tournament_game(callback_query: CallbackQuery):
    global tournament_matches

    try:
        match_index = int(callback_query.data.split("_")[3])
    except (IndexError, ValueError):
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
        return

    admin_id = callback_query.from_user.id
    if admin_id != 7459734786:
        await callback_query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—É!", show_alert=True)
        return

    print(f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π: {tournament_matches}")

    # –ò—â–µ–º –º–∞—Ç—á –ø–æ –∏–Ω–¥–µ–∫—Å—É
    match = next((m for m in tournament_matches if m[2] == match_index), None)

    if not match:
        await callback_query.answer("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    player_one, player_two, _ = match
    tournament_matches = [m for m in tournament_matches if m[2] != match_index]  # –£–¥–∞–ª—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –º–∞—Ç—á

    if player_two == "bot":
        await advance_winner_in_bracket(bot=callback_query.bot, winner_id=player_one)
        return

    await callback_query.answer("–ú–∞—Ç—á –∑–∞–ø—É—â–µ–Ω!")

    game = ongoing_games.setdefault(player_one, {
        "attacker": player_one,
        "defender": player_two,
        "round": 1,
        "scores": {player_one: 0, player_two: 0},
        "state": "waiting_for_attack",
        "current_attacker": player_one,
        "current_defender": player_two,
        "history": {player_one: '', player_two: ''},
        "messages": {},
        "usernames": {
            player_one: (await callback_query.bot.get_chat(player_one)).username or f"–ò–≥—Ä–æ–∫ {player_one}",
            player_two: (await callback_query.bot.get_chat(player_two)).username or f"–ò–≥—Ä–æ–∫ {player_two}"
        }
    })

    attack_message = await callback_query.bot.send_photo(
        chat_id=player_one,
        photo=cached_photo_path3,
        caption=f"–í—ã –±—å—ë—Ç–µ –ø–µ—Ä–≤—ã–º!\n –°—á—ë—Ç: \n<b>{game['usernames'][player_one]}</b> {game['scores'][player_one]} - {game['scores'][player_two]} <b>{game['usernames'][player_two]}</b>\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞—Ä–∞ ‚öΩ",
        parse_mode='HTML',
        reply_markup=tournament_attack_buttons,
    )

    wait_message = await callback_query.bot.send_photo(
        chat_id=player_two,
        photo=cached_photo_path7,
        parse_mode='HTML',
        caption=f"–°—á—ë—Ç: \n<b>{game['usernames'][game['attacker']]}</b> {game['scores'][game['attacker']]} - {game['scores'][game['defender']]} <b>{game['usernames'][game['defender']]}</b>\n"
                "–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç —É–¥–∞—Ä ‚öΩ",
    )

    game["messages"][player_one] = attack_message.message_id
    game["messages"][player_two] = wait_message.message_id

    await start_turn_timer(game, callback_query, player_one)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Ç–∞–∫–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
@player_router.callback_query(lambda c: c.data.startswith("tournament_attack_"))
async def handle_tournament_attack(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    game = next((g for g in ongoing_games.values() if g.get("current_attacker") == user_id), None)

    if not game or game["state"] != "waiting_for_attack":
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à —Ö–æ–¥!")
        return

    # –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∞—Ç–∞–∫–æ–π
    await reset_timer(user_id)

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —É–¥–∞—Ä–∞
    if game.get("attack_locked"):
        await callback_query.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞—Ä–∞!")
        return

    game["attack_locked"] = True
    attack_direction = callback_query.data.split("_")[-1]
    game["attack"] = attack_direction
    game["state"] = "waiting_for_defense"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Ç–∞–∫—É—é—â–µ–≥–æ
    await callback_query.bot.edit_message_media(
        chat_id=user_id,
        message_id=game["messages"][user_id],
        media=types.InputMediaPhoto(
            media=cached_photo_path3,
            caption="–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞—Ä–∞. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∑–∞—â–∏—Ç–∏—Ç—Å—è ‚öΩ",
        ),
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∞
    await callback_query.bot.edit_message_media(
        chat_id=game["current_defender"],
        message_id=game["messages"][game["current_defender"]],
        media=types.InputMediaPhoto(
            media=cached_photo_path7,
            caption=(
                f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –±—å—ë—Ç! \n–°—á—ë—Ç:\n"
                f"<b>{game['usernames'][game['attacker']]}</b> {game['scores'][game['attacker']]} - "
                f"{game['scores'][game['defender']]} <b>{game['usernames'][game['defender']]}</b>\n\n"
                f"–ò—Å—Ç–æ—Ä–∏—è —É–¥–∞—Ä–æ–≤\n"
                f"<b>{game['usernames'][game['attacker']]}</b>: {game['history'][game['attacker']]}\n"
                f"<b>{game['usernames'][game['defender']]}</b>: {game['history'][game['defender']]}\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞—â–∏—Ç—ã üß§"
            ),
            parse_mode='HTML',
        ),
        reply_markup=tournament_defense_buttons,
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞—â–∏—Ç–Ω–∏–∫–∞
    await start_turn_timer(game, callback_query, game["current_defender"])




@player_router.callback_query(lambda c: c.data.startswith("tournament_defense_"))
async def handle_tournament_defense(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    game = next((g for g in ongoing_games.values() if g.get("current_defender") == user_id), None)

    if not game or game["state"] != "waiting_for_defense":
        await callback_query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à —Ö–æ–¥!")
        return

    # –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞—â–∏—Ç–æ–π
    await reset_timer(user_id)

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    if game.get("defense_locked"):
        await callback_query.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã!")
        return

    game["defense_locked"] = True
    defense_direction = callback_query.data.split("_")[-1]
    attack_direction = game["attack"]
    attacker_id = game["current_attacker"]
    defender_id = game["current_defender"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞—Ä–∞
    if attack_direction == defense_direction:
        result = "–£–¥–∞—Ä –æ—Ç–±–∏—Ç! –û—Ç–ª–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞! üß§"
        game['history'][attacker_id] += 'üß§'
    else:
        result = "–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è! ‚öΩ"
        game['history'][attacker_id] += '‚öΩ'
        game["scores"][attacker_id] += 1

    # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
    result_message = (
        f"{result}\n\n–°—á—ë—Ç: {game['usernames'][attacker_id]} {game['scores'][attacker_id]} - "
        f"{game['usernames'][defender_id]} {game['scores'][defender_id]}\n\n"
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
    try:
        await callback_query.bot.delete_message(chat_id=attacker_id, message_id=game["messages"][attacker_id])
        await callback_query.bot.delete_message(chat_id=defender_id, message_id=game["messages"][defender_id])
    except TelegramBadRequest as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–≥—Ä–æ–∫–æ–≤: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    if game["round"] < 6 or (game["round"] < 10 and game["scores"][game["attacker"]] == game["scores"][game["defender"]]):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π
        game["round"] += 1
        game["current_attacker"], game["current_defender"] = game["current_defender"], game["current_attacker"]
        game["state"] = "waiting_for_attack"
        game.pop("attack_locked", None)
        game.pop("defense_locked", None)

        # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞—Ç–∞–∫—É—é—â–µ–≥–æ
        next_attacker_id = game["current_attacker"]
        try:
            attack_message = await callback_query.bot.send_photo(
                chat_id=next_attacker_id,
                photo=cached_photo_path3,
                caption=(f"–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –±–∏—Ç—å! \n\n–°—á—ë—Ç:\n"
                         f"<b>{game['usernames'][game['attacker']]}</b> {game['scores'][game['attacker']]} - "
                         f"{game['scores'][game['defender']]} <b>{game['usernames'][game['defender']]}</b>\n\n"
                         f"–ò—Å—Ç–æ—Ä–∏—è —É–¥–∞—Ä–æ–≤\n"
                         f"<b>{game['usernames'][game['attacker']]}</b>: {game['history'][game['attacker']]}\n"
                         f"<b>{game['usernames'][game['defender']]}</b>: {game['history'][game['defender']]}\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞—Ä–∞ ‚öΩ"),
                parse_mode='HTML',
                reply_markup=tournament_attack_buttons,
            )
            game["messages"][next_attacker_id] = attack_message.message_id
        except TelegramBadRequest as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Ç–∞–∫—É—é—â–µ–º—É {next_attacker_id}: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –æ–∂–∏–¥–∞—Ç—å
        try:
            defender_wait_message = await callback_query.bot.send_photo(
                chat_id=game["current_defender"],
                photo=cached_photo_path7,
                caption="–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç —É–¥–∞—Ä ‚öΩ\n",
            )
            game["messages"][game["current_defender"]] = defender_wait_message.message_id
        except TelegramBadRequest as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—â–∏—Ç–Ω–∏–∫—É {game['current_defender']}: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞—Ç–∞–∫—É—é—â–µ–≥–æ
        await start_turn_timer(game, callback_query, next_attacker_id)
    else:
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
        final_message = "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"

        if game["scores"][game["attacker"]] > game["scores"][game["defender"]]:
            final_message += f"üéâ –ü–æ–±–µ–¥–∏–ª <b>{game['usernames'][game['attacker']]}</b>!\n\n"
            winner_id = game["attacker"]
            loser_id = game["defender"]
        elif game["scores"][game["attacker"]] < game["scores"][game["defender"]]:
            final_message += f"üéâ –ü–æ–±–µ–¥–∏–ª <b>{game['usernames'][game['defender']]}</b>!\n"
            winner_id = game["defender"]
            loser_id = game["attacker"]
        else:
            final_message += "ü§ù –ù–∏—á—å—è!\n"
            winner_id = None
            loser_id = None

        final_message += (
            f"–°—á—ë—Ç:\n"
            f"<b>{game['usernames'][game['attacker']]}</b>: {game['scores'][game['attacker']]}\n"
            f"<b>{game['usernames'][game['defender']]}</b>: {game['scores'][game['defender']]}\n\n"
            f"–ò—Å—Ç–æ—Ä–∏—è —É–¥–∞—Ä–æ–≤\n"
            f"<b>{game['usernames'][game['attacker']]}</b>: {game['history'][game['attacker']]}\n"
            f"<b>{game['usernames'][game['defender']]}</b>: {game['history'][game['defender']]}\n"
        )

        for player_id in [game["attacker"], game["defender"]]:
            try:
                await callback_query.bot.send_photo(
                    chat_id=player_id,
                    photo=cached_photo_path6,
                    caption=final_message,
                    parse_mode='HTML',
                )
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã –∏–≥—Ä–æ–∫—É {player_id}")
            except TelegramBadRequest as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player_id}: {e}")

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if loser_id:
            del confirmed_users[loser_id]
            try:
                await callback_query.bot.send_message(
                    7459734786,
                    f"–ò–≥—Ä–æ–∫ @{game['usernames'][loser_id]} —É–¥–∞–ª—ë–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞."
                )
                print(f"–ò–≥—Ä–æ–∫ @{game['usernames'][loser_id]} —É–¥–∞–ª—ë–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞")
            except TelegramBadRequest as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

        # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞
        ongoing_games.pop(game["attacker"], None)
        ongoing_games.pop(game["defender"], None)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏
        if not any(g for g in ongoing_games.values() if g.get("state") in ["waiting_for_attack", "waiting_for_defense"]):
            await check_and_start_next_round(callback_query.bot)
            print("–í—Å–µ –º–∞—Ç—á–∏ —Ä–∞—É–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –≤—ã–∑–≤–∞–Ω–∞ check_and_start_next_round")


@player_router.callback_query(lambda c: c.data == "start_next_round")
async def start_next_round(callback_query: CallbackQuery):
    global confirmed_users, tournament_matches, sent_matches, matches_sent

    admin_id = callback_query.from_user.id
    if admin_id != 7459734786:
        await callback_query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞—É–Ω–¥!", show_alert=True)
        return

    remaining_players = list(confirmed_users.keys())
    print(f"start_next_round: –ó–∞–ø—É—Å–∫ —Ä–∞—É–Ω–¥–∞, –∏–≥—Ä–æ–∫–æ–≤: {remaining_players}")

    if len(remaining_players) < 2:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞!", show_alert=True)
        print("start_next_round: –û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —Å –ø–æ–º–æ—â—å—é generate_fixed_bracket
    random.shuffle(remaining_players)
    new_matches = generate_fixed_bracket(remaining_players)

    tournament_matches = new_matches
    matches_sent = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π

    await send_matchups(callback_query.bot)
    await callback_query.answer("–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –∑–∞–ø—É—â–µ–Ω!")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    try:
        await callback_query.message.delete()
        print("start_next_round: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–æ")
    except TelegramBadRequest:
        print("start_next_round: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–∞")
    
    print(f"start_next_round: –ó–∞–ø—É—â–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥, –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏: {new_matches}")