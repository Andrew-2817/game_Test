import os
import time
import asyncio
from aiogram import Router, types, Bot
from aiogram.filters import Command
from hendlers.ls.player import cached_photo_path21
from keyboards import group_simbols_for_KMN, CMN_accept_keyboard
from db import get_db_connection
from db_moves.add_db import add_shop, add_user, init_player_statistics, update_user_coins, update_user_statistics, add_matches, use_el_in_game
from db_moves.get_db import check_player_design, check_user_el_in_game, check_user_role, get_player_match_points, get_player_win_streak, get_player_best_win_streak
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
cached_photo_path3 = types.FSInputFile(os.path.join("img", "–ö–ú–ù.jpg"))
cached_photo_path4 = types.FSInputFile(os.path.join("img", "kmn_play.jpg"))
cached_photo_path5 = types.FSInputFile(os.path.join("img", "5711954.jpg"))
cached_photo_path6 = types.FSInputFile(os.path.join("img", "tours2.jpg"))
cached_photo_path7 = types.FSInputFile(os.path.join("img", "11698.jpg"))
help_history = []
help_penalty_text = []
supershot_plus = 0
pl1_choice = []
pl2_choice = []
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
KMN_router = Router()
# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ—Å–ª–∏ –æ–Ω –≤ –ª–∏—á–∫—É –Ω–µ –∑–∞–π–¥—ë—Ç)
async def add_user_in_background(user_id: int, username: str, join_date: datetime):
    await add_user(user_id, username, join_date)


async def delete_message_after_timer(bot: Bot, chat_id: int, message_id: int, timer: int):
    await asyncio.sleep(timer)
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def is_player_in_game(user_id):
    for game in active_games.values():
        if (
            game["player1"]["id"] == user_id or 
            game["player2"]["id"] == user_id
        ):
            return True
    return False


@KMN_router.message(Command(commands=["start_CMN"]))
async def start_game_command(message: types.Message):
    
    user_id = message.from_user.id
    request_role = await check_user_role(user_id)
    player_role = [role["role"] for role in request_role][0]

    player_design = await check_player_design(user_id)
    username = message.from_user.username
    join_date = datetime.now()

    # –ó–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(add_user_in_background(user_id, username, join_date))

    # –ò–Ω–∏—Ü–∏–≤–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
    await init_player_statistics(user_id)

    if message.chat.type not in ["group", "supergroup"]:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!")
        return

    if is_player_in_game(message.from_user.id):
        await message.reply("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é.")
        return

    sent_message = await message.reply_photo(
        photo=cached_photo_path3 if not player_design else cached_photo_path21,
        caption=f"<b>–ò–≥—Ä–æ–∫ @{message.from_user.username}</b> –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥—É—ç–ª—å –≤ <i>–¶—É–µ—Ñ–∞!ü™®‚úÇÔ∏èüìÉ</i>\n"
        "–ù–∞–∂–º–∏—Ç–µ <b>–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤</b>, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!",
        parse_mode='HTML',
        reply_markup=CMN_accept_keyboard
    )
    await delete_message_after_timer(
        bot=bot,
        chat_id=sent_message.chat.id,
        message_id=sent_message.message_id,
        timer=30
    )

active_games = {}
emojis = {"kamen": "ü™®", "bumaga": "üìÉ", "nognichi": "‚úÇÔ∏è", "none": "‚ùå"}
choices = {
    "kamen": {"bumaga": "–ø—Ä–æ–∏–≥—Ä–∞–ª", "nognichi": "–ø–æ–±–µ–¥–∏–ª", "none": "–ø–æ–±–µ–¥–∏–ª"},
    "bumaga": {"nognichi": "–ø—Ä–æ–∏–≥—Ä–∞–ª", "kamen": "–ø–æ–±–µ–¥–∏–ª", "none": "–ø–æ–±–µ–¥–∏–ª"},
    "nognichi": {"kamen": "–ø—Ä–æ–∏–≥—Ä–∞–ª", "bumaga": "–ø–æ–±–µ–¥–∏–ª", "none": "–ø–æ–±–µ–¥–∏–ª"},
    "none": {"kamen": "–ø—Ä–æ–∏–≥—Ä–∞–ª", "bumaga": "–ø—Ä–æ–∏–≥—Ä–∞–ª", "nognichi": "–ø—Ä–æ–∏–≥—Ä–∞–ª"}
}

@KMN_router.callback_query(lambda c: c.data == "CMN_accept")
async def handle_CMN_accept(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    global help_history
    help_history = []
    message = callback_query.message
    author_id = message.reply_to_message.from_user.id
    author_username = message.reply_to_message.from_user.username
    await add_shop(user_id = user_id)
    # player_kb = []
    # check_player_el = await check_user_el_in_game(user_id = user_id)
    # for i in check_player_el:
    #     el_data = ''
    #     if i == '–ü–æ–¥—Å–∫–∞–∑–∫–∞': el_data = 'help_in_game'
    #     elif i == "–°—É–ø–µ—Ä—É–¥–∞—Ä": el_data = 'supershot_in_game'
    #     else: el_data = 'supersave_in_game'
    #     new_btn = InlineKeyboardButton(text=f"{i}", callback_data=el_data)
    #     player_kb.append(new_btn)
    # print(check_player_el)

    join_date = datetime.now()

    # –ó–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(add_user_in_background(user_id, username, join_date))

    # –ò–Ω–∏—Ü–∏–≤–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
    await init_player_statistics(user_id)

    if is_player_in_game(user_id):
        await callback_query.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.", show_alert=True)
        return

    # if user_id == author_id:
    #     await callback_query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Å–µ–±—è!", show_alert=True)
    #     return


    game_message = await callback_query.message.answer_photo(
        photo=cached_photo_path4,
        caption = f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n{author_username} VS {username}\n\n"
        f" ‚Ä¢ <i>–†–∞—É–Ω–¥ 1</i>: –û–∂–∏–¥–∞–µ–º —Ö–æ–¥—ã –∏–≥—Ä–æ–∫–æ–≤.\n",  # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞
        parse_mode = "HTML",
        reply_markup=group_simbols_for_KMN
    )

    active_games[game_message.message_id] = {
        "player1": {"id": author_id, "username": author_username, "choice": None, "score": 0, "start_time": time.time()},
        "player2": {"id": user_id, "username": username, "choice": None, "score": 0, "start_time": time.time()},
        "round": 1,
        "history": [],
        "consecutive_draws": 0,
        "message": game_message
    }

    await callback_query.answer()
    await start_round_timer(game_message.message_id)


async def start_round_timer(message_id):
    game = active_games[message_id]

    pl_win_streak = await get_player_win_streak(user_id=game["player1"]["id"], game_id=1)
    p2_win_streak = await get_player_win_streak(user_id=game["player2"]["id"], game_id=1)
    pl1_best_win_streak = await get_player_best_win_streak(user_id=game["player1"]["id"], game_id=1)
    pl2_best_win_streak = await get_player_best_win_streak(user_id=game["player2"]["id"], game_id=1)
    request1_role = await check_user_role(game["player1"]["id"])
    player1_role = [role["role"] for role in request1_role][0]

    request2_role = await check_user_role(game["player2"]["id"])
    player2_role = [role["role"] for role in request2_role][0]
   
    if "start_time" not in game:
        game["start_time"] = datetime.now()

    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∑–∞ 10 —Å–µ–∫ –Ω–µ —É—Å–ø–µ–ª —Ç–æ–≥–¥–∞ –∫—Ä–µ—Å—Ç–∏–∫
        if game["player1"]["choice"] is None:
            time_elapsed_player1 = time.time() - game["player1"].get("start_time", time.time())
            if time_elapsed_player1 >= 5:
                game["player1"]["choice"] = "none"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∑–∞ 10 —Å–µ–∫ 
        if game["player2"]["choice"] is None:
            time_elapsed_player2 = time.time() - game["player2"].get("start_time", time.time())
            if time_elapsed_player2 >= 5:
                game["player2"]["choice"] = "none"

        # –ö–æ–≥–¥–∞ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä
        if game["player1"]["choice"] and game["player2"]["choice"]:
            result_text = resolve_round(game)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–±–µ–¥—ã –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            if game["player1"]["score"] == 3:
                result = f"{game['player1']['username']} 3:{game['player2']['score']} {game['player2']['username']}"
                # —Ç—É—Ç –º–æ–∂–Ω–æ –∫–æ–Ω–µ—á–Ω—É—é —Ñ—Ä–∞–∑—É –ø–æ–º–µ–Ω—è—Ç—å –æ –ø–æ–±–µ–¥–µ 1 –∏–≥—Ä–æ–∫–∞ 
                await game["message"].edit_media(
                    media = types.InputMediaPhoto(
                        media= cached_photo_path6,
                        caption = f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚Ä¢–¶—É–µ—Ñ–∞\n\n <b>{game['player1']['username']} –ø–æ–±–µ–¥–∏–ª!</b> \n {game['player1']['score']} : {game['player2']['score']}\n\n{result_text}\n",
                        parse_mode = "HTML"
                    )       
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä–µ
                often_choice_pl1 = {
                    "kamen" : pl1_choice.count('kamen'),
                    "nognichi" : pl1_choice.count('nognichi'),
                    "bumaga" : pl1_choice.count('bumaga')
                }
                often_choice_pl2 = {
                    "kamen" : pl2_choice.count('kamen'),
                    "nognichi" : pl2_choice.count('nognichi'),
                    "bumaga" : pl2_choice.count('bumaga')
                }
                await update_user_coins(10 if player1_role == 'player' else 20, game["player1"]["id"])
                print(often_choice_pl1, often_choice_pl2, pl1_choice)
                # pl_win_streak = await get_player_win_streak(user_id=game["player1"]["id"], game_id=1)
                # p2_win_streak = await get_player_win_streak(user_id=game["player2"]["id"], game_id=1)
                # pl1_best_win_streak = await get_player_best_win_streak(user_id=game["player1"]["id"], game_id=1)
                # pl2_best_win_streak = await get_player_best_win_streak(user_id=game["player2"]["id"], game_id=1)
                await add_matches(
                    game_id=1, 
                    player1_id=game["player1"]["id"], 
                    player2_id=game["player2"]["id"], 
                    result=result, 
                    start_time=game["start_time"]
                )
                await update_user_statistics(
                    user_id=game["player1"]["id"],
                    game_id=1,
                    win = 1,
                    draw = 0,
                    loss = 0,
                    win_streak = pl_win_streak+1,
                    best_win_streak= pl1_best_win_streak if pl1_best_win_streak>pl_win_streak+1 else pl_win_streak+1,
                    choice_1=often_choice_pl1['kamen'],
                    choice_2=often_choice_pl1['nognichi'],
                    choice_3=often_choice_pl1['bumaga'],
                    match_points=10
                )
                await update_user_statistics(
                    user_id=game["player2"]["id"],
                    game_id=1,
                    win = 0,
                    draw = 0,
                    loss = 1,
                    win_streak=0,
                    best_win_streak= pl2_best_win_streak,
                    choice_1=often_choice_pl2['kamen'],
                    choice_2=often_choice_pl2['nognichi'],
                    choice_3=often_choice_pl2['bumaga'],
                    match_points= 0 if await get_player_match_points(user_id=game["player2"]["id"], game_id=1) < 10 else -10
                )
                pl1_choice.clear()
                pl2_choice.clear()
                del active_games[message_id]
                break

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–±–µ–¥—ã –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            elif game["player2"]["score"] == 3:
                result = f"{game['player1']['username']} {game['player1']['score']}:3 {game['player2']['username']}"
                # —Ç—É—Ç –º–æ–∂–Ω–æ –∫–æ–Ω–µ—á–Ω—É—é —Ñ—Ä–∞–∑—É –ø–æ–º–µ–Ω—è—Ç—å –æ –ø–æ–±–µ–¥–µ 2 –∏–≥—Ä–æ–∫–∞ 
                await game["message"].edit_media(
                    media = types.InputMediaPhoto(
                        media= cached_photo_path6,
                        caption = f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚Ä¢–¶—É–µ—Ñ–∞\n\n <b>{game['player2']['username']} –ø–æ–±–µ–¥–∏–ª! </b>\n {game['player1']['score']} : {game['player2']['score']} \n\n{result_text}\n",
                        parse_mode = "HTML"
                    )
                )
                often_choice_pl1 = {
                    "kamen" : pl1_choice.count('kamen'),
                    "nognichi" : pl1_choice.count('nognichi'),
                    "bumaga" : pl1_choice.count('bumaga')
                }
                often_choice_pl2 = {
                    "kamen" : pl2_choice.count('kamen'),
                    "nognichi" : pl2_choice.count('nognichi'),
                    "bumaga" : pl2_choice.count('bumaga')
                }
                await update_user_coins(10 if player2_role == 'player' else 20, game["player2"]["id"])
                await add_matches(
                    game_id=1, 
                    player1_id=game["player1"]["id"], 
                    player2_id=game["player2"]["id"], 
                    result=result, 
                    start_time=game["start_time"]
                )
                await update_user_statistics(
                    user_id=game["player1"]["id"],
                    game_id=1,
                    win = 0,
                    draw = 0,
                    loss = 1,
                    win_streak=0,
                    best_win_streak=pl1_best_win_streak,
                    choice_1=often_choice_pl1['kamen'],
                    choice_2=often_choice_pl1['nognichi'],
                    choice_3=often_choice_pl1['bumaga'],
                    match_points= 0 if await get_player_match_points(user_id=game["player1"]["id"], game_id=1) < 10 else -10
                )
                await update_user_statistics(
                    user_id=game["player2"]["id"],
                    game_id=1,
                    win = 1,
                    draw = 0,
                    loss = 0,
                    win_streak = p2_win_streak+1,
                    best_win_streak= pl2_best_win_streak if pl2_best_win_streak>p2_win_streak+1 else p2_win_streak+1,
                    choice_1=often_choice_pl2['kamen'],
                    choice_2=often_choice_pl2['nognichi'],
                    choice_3=often_choice_pl2['bumaga'],
                    match_points=10
                )
                pl1_choice.clear()
                pl2_choice.clear()
                del active_games[message_id]
                break

            # –¥–ª—è –∑–ª–æ–¥–µ–µ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –Ω–∏—á—å–∏—Ö
            elif game["consecutive_draws"] >= 8:
                result = f"{game['player1']['username']} {game['player1']['score']}:{game['player2']['score']} {game['player2']['username']}"
                # –µ—Å–ª–∏ –Ω–∏—á—å—è —Ç–æ —Ç—É—Ç –º–æ–∂–Ω–æ —Ñ—Ä–∞–∑—É –ø–æ–º–µ–Ω—è—Ç—å 
                await game["message"].edit_media(
                    media = types.InputMediaPhoto(
                        media= cached_photo_path6,
                        caption = f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚Ä¢–¶—É–µ—Ñ–∞\n\n<b> –ù–∏—á—å—è </b> ‚Äî 8 –Ω–∏—á—å–∏—Ö –ø–æ–¥—Ä—è–¥.\n{game['player1']['score']} : {game['player2']['score']} \n\n{result_text}\n",
                        parse_mode = "HTML"
                    )
                )
                often_choice_pl1 = {
                    "kamen" : pl1_choice.count('kamen'),
                    "nognichi" : pl1_choice.count('nognichi'),
                    "bumaga" : pl1_choice.count('bumaga')
                }
                often_choice_pl2 = {
                    "kamen" : pl2_choice.count('kamen'),
                    "nognichi" : pl2_choice.count('nognichi'),
                    "bumaga" : pl2_choice.count('bumaga')
                }
                await add_matches(
                    game_id=1, 
                    player1_id=game["player1"]["id"], 
                    player2_id=game["player2"]["id"], 
                    result=result, 
                    start_time=game["start_time"]
                )
                await update_user_statistics(
                    user_id=game["player1"]["id"],
                    game_id=1,
                    win = 0,
                    draw = 1,
                    loss = 0,
                    win_streak = 0,
                    best_win_streak= pl1_best_win_streak,
                    choice_1=often_choice_pl1['kamen'],
                    choice_2=often_choice_pl1['nognichi'],
                    choice_3=often_choice_pl1['bumaga'],
                    match_points=3
                )
                await update_user_statistics(
                    user_id=game["player2"]["id"],
                    game_id=1,
                    win = 0,
                    draw = 1,
                    loss = 0,
                    win_streak = 0,
                    best_win_streak= pl2_best_win_streak,
                    choice_1=often_choice_pl2['kamen'],
                    choice_2=often_choice_pl2['nognichi'],
                    choice_3=often_choice_pl2['bumaga'],
                    match_points=3
                )
                pl1_choice.clear()
                pl2_choice.clear()
                del active_games[message_id]
                break

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ —ç—Ç–æ–≥–æ 
            else:
                game["round"] += 1
                reset_round(game)
                # —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ 
                await game["message"].edit_caption(
                    caption = result_text,
                    parse_mode = "HTML",
                    reply_markup=group_simbols_for_KMN,  # –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞—Ç—å
                )
                
                await start_round_timer(message_id)
            break

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ü–∏–∫–ª–∞ –≥–ø—Ç –≥–æ–≤–æ—Ä–∏—Ç –∑–∞–¥–µ—Ä–∂–∫–∞ —á—É—Ç—å –æ—Å–ª–∞–±–ª—è–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É —è –¥–∞–∂–µ –ø–æ–≤–µ—Ä–∏–ª 
        await asyncio.sleep(1)



@KMN_router.callback_query(lambda c: c.data in ["kamen", "bumaga", "nognichi"])
async def handle_choice(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    choice = callback_query.data
    game = active_games.get(message_id)

    if not game:
        await callback_query.answer("–≠—Ç–∞ –∏–≥—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
        return

    
    if user_id not in [game["player1"]["id"], game["player2"]["id"]]:
        await callback_query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.", show_alert=True)
        return

    current_player = "player1" if game["player1"]["id"] == user_id else "player2"

    if game[current_player]["choice"] is not None:
        await callback_query.answer(f"–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ {game[current_player]['choice']}.")
        return

    game[current_player]["choice"] = choice
    await callback_query.answer("–í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")


def resolve_round(game):
    player1_choice = game["player1"]["choice"]
    player2_choice = game["player2"]["choice"]
    global supershot_plus

    if player1_choice == player2_choice:
        # –ù–∏—á—å—è
        game["consecutive_draws"] += 1
        result = (
            f" ‚Ä¢ <i>–†–∞—É–Ω–¥ {game['round']}</i>:\n {game['player1']['username']} {emojis[player1_choice]} \n"
            f"{game['player2']['username']} {emojis[player2_choice]} \n<b>–ù–∏—á—å—è!</b>\n"
        )
    else:
        game["consecutive_draws"] = 0
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ç–æ —Ä–∞—É–Ω–¥ –∑–∞–±—Ä–∞–ª 
        if player2_choice in choices[player1_choice]:
            outcome = choices[player1_choice][player2_choice]
        else:
            outcome = "–ø—Ä–æ–∏–≥—Ä–∞–ª"

        if outcome == "–ø–æ–±–µ–¥–∏–ª":
            winner, loser = "player1", "player2"
        else:
            winner, loser = "player2", "player1"

        # –°—á—ë—Ç –≤ —Å–µ—Ä–∏–∏ 
        game[winner]["score"] = game[winner]["score"] + supershot_plus + 1
        result = (
            f" ‚Ä¢ <i>–†–∞—É–Ω–¥ {game['round']}</i>:\n{game[winner]['username']} {emojis[player1_choice if winner == 'player1' else player2_choice]} \n"
            f"{game[loser]['username']} {emojis[player2_choice if winner == 'player1' else player1_choice]} \n<b>üèÖ{game[winner]['username']} –ø–æ–±–µ–¥–∏–ª!</b>\n"
        )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤ 
    game["history"].append(result)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if game["player1"]["score"] >= 3 or game["player2"]["score"] >= 3 or game["consecutive_draws"] >= 8:
        # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        # —Ç–µ–∫—Å—Ç –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∫–∞—Ç–∫–∞:
        result_text = f"{game['player1']['username']} vs {game['player2']['username']}\n" + "\n".join(game["history"])
        return result_text

    # –¢–µ–∫—Å—Ç –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    game_state = (
        f"{game['player1']['username']} vs {game['player2']['username']}\n"
        f"–°—á—ë—Ç: {game['player1']['score']}:{game['player2']['score']}\n\n"
        f"–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä—ã:\n" + "\n".join(game["history"]) + "\n\n"
        f" ‚Ä¢ <i>–†–∞—É–Ω–¥ {game['round'] + 1}</i>: –û–∂–∏–¥–∞–µ–º —Ö–æ–¥—ã –∏–≥—Ä–æ–∫–æ–≤.\n"
    )

    return game_state

def reset_round(game):
    game["player1"]["choice"] = None
    game["player2"]["choice"] = None
    game["player1"]["start_time"] = time.time()
    game["player2"]["start_time"] = time.time()
    global supershot_plus
    supershot_plus = 0



@KMN_router.callback_query(lambda c: c.data in ["supershot_in_kmn"])
async def handle_defense_kmn(callback_query: types.CallbackQuery):
    global help_history
    user_id = callback_query.from_user.id
    user_el = await check_user_el_in_game(user_id=user_id)
    choice = callback_query.data
    if user_id not in help_history:
        if choice =="supershot_in_kmn":
            if '–°—É–ø–µ—Ä—É–¥–∞—Ä' in user_el:
                global supershot_plus
                supershot_plus+=1
    
                await callback_query.answer(
                            text=f"–°—É–ø–µ—Ä—É–¥–∞—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, –±–µ–π—Ç–µ!",
                            show_alert=True
                        )
                await use_el_in_game(user_id = user_id, sale_name='–°—É–ø–µ—Ä—É–¥–∞—Ä')
                help_history.append(user_id)
            elif '–°—É–ø–µ—Ä—É–¥–∞—Ä' not in user_el:
                await callback_query.answer(
                        text=f"–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–æ–Ω—É—Å–∞",
                        show_alert=True
                    )
    else:
        await callback_query.answer(
                        text=f"–£—Å–∏–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –∏–≥—Ä—É",
                        show_alert=True
                    )